# Autogenerated file. Changes will be overwritten

source_file = ENV["SOURCE_FILE"]
cell_name = ENV["CELL_NAME"]
if cell_name.empty?
    source(source_file)
else
    source(source_file, cell_name)
end
schematic(ENV["SPICE_FILE"])
report_lvs(ENV["REPORT_FILE"])

flat

# Define layers
NWell = input(31, 0)
pSD = input(14, 0)
ThickGateOx = input(44, 0)
GatPoly_pin = input(5, 2)
GatPoly_obs = input(5, 100)
GatPoly = input(5, 0)
Activ_pin = input(1, 2)
Activ_obs = input(1, 100)
Activ = input(1, 0)
Metal1_pin = input(8, 2)
Metal1_obs = input(8, 100)
Metal1 = input(8, 0)
Metal2_pin = input(10, 2)
Metal2_obs = input(10, 100)
Metal2 = input(10, 0)
Metal3_pin = input(30, 2)
Metal3_obs = input(30, 100)
Metal3 = input(30, 0)
Metal4_pin = input(50, 2)
Metal4_obs = input(50, 100)
Metal4 = input(50, 0)
Metal5_pin = input(67, 2)
Metal5_obs = input(67, 100)
Metal5 = input(67, 0)
TopMetal1_pin = input(126, 2)
TopMetal1_obs = input(126, 100)
TopMetal1 = input(126, 0)
TopMetal2_pin = input(134, 2)
TopMetal2_obs = input(134, 100)
TopMetal2 = input(134, 0)
Cont_obs = input(6, 100)
Via1_obs = input(19, 100)
Via2_obs = input(29, 100)
Via3_obs = input(49, 100)
Via4_obs = input(66, 100)
TopVia1_obs = input(125, 100)
TopVia2_obs = input(133, 100)
Cont = input(6, 0)
Via1 = input(19, 0)
Via2 = input(29, 0)
Via3 = input(49, 0)
Via4 = input(66, 0)
TopVia1 = input(125, 0)
TopVia2 = input(133, 0)
Substrate = input(40, 0)
Passiv = input(9, 0)
EXTBlock = input(111, 0)
SalBlock = input(28, 0)
RES = input(24, 0)
Recog_dio = input(99, 31)
Recog_esd = input(99, 30)
TEXT = input(63, 0)
prBoundary = input(189, 0)

# Derived layers
# wafer.alias(_wafer)
_wafer = extent.sized(0.31)
# _wafer.remove(NWell).alias(substrate:IHPSG13G2)
substrate__IHPSG13G2 = (_wafer-NWell)
# GatPoly.remove(join(SalBlock,RES)).alias(GatPoly__conn)
GatPoly__conn = (GatPoly-(SalBlock+RES))
# Activ.remove(GatPoly).alias(Activ__conn)
Activ__conn = (Activ-GatPoly)
# intersect(Activ__conn,pSD).alias(Activ__conn:pSD)
Activ__conn__pSD = (Activ__conn&pSD)
# Activ__conn.remove(pSD).alias(Activ__conn:bare)
Activ__conn__bare = (Activ__conn-pSD)
# intersect(Activ,GatPoly__conn,ThickGateOx).alias(gate:hvmosgate)
gate__hvmosgate = (Activ&GatPoly__conn&ThickGateOx)
# intersect(Activ,GatPoly__conn,_wafer.remove(ThickGateOx)).alias(gate:lvmosgate)
gate__lvmosgate = (Activ&GatPoly__conn&(_wafer-ThickGateOx))
# gate:hvmosgate.remove(NWell).alias(gate:mosfet:sg13g2_hv_nmos)
gate__mosfet__sg13g2_hv_nmos = (gate__hvmosgate-NWell)
# intersect(gate:hvmosgate,pSD,NWell).alias(gate:mosfet:sg13g2_hv_pmos)
gate__mosfet__sg13g2_hv_pmos = (gate__hvmosgate&pSD&NWell)
# gate:lvmosgate.remove(NWell).alias(gate:mosfet:sg13g2_lv_nmos)
gate__mosfet__sg13g2_lv_nmos = (gate__lvmosgate-NWell)
# intersect(gate:lvmosgate,pSD,NWell).alias(gate:mosfet:sg13g2_lv_pmos)
gate__mosfet__sg13g2_lv_pmos = (gate__lvmosgate&pSD&NWell)
# intersect(GatPoly,SalBlock,pSD,EXTBlock).alias(resistor:Rppd)
resistor__Rppd = (GatPoly&SalBlock&pSD&EXTBlock)
# intersect(SalBlock).alias(indicators:resistor:Rppd)
indicators__resistor__Rppd = (SalBlock)
# intersect(resistor:Rppd,indicators:resistor:Rppd).alias(body:resistor:Rppd)
body__resistor__Rppd = (resistor__Rppd&indicators__resistor__Rppd)
# intersect(GatPoly,RES).alias(resistor:Rsil)
resistor__Rsil = (GatPoly&RES)
# intersect(RES).alias(indicators:resistor:Rsil)
indicators__resistor__Rsil = (RES)
# intersect(resistor:Rsil,indicators:resistor:Rsil).alias(body:resistor:Rsil)
body__resistor__Rsil = (resistor__Rsil&indicators__resistor__Rsil)
# intersect(Activ,Recog.dio,pSD).alias(diode:pdiode)
diode__pdiode = (Activ&Recog_dio&pSD)
# intersect(Activ,Recog.dio).alias(diode:ndiode)
diode__ndiode = (Activ&Recog_dio)

# Connectivity
# connect(substrate:IHPSG13G2,_wafer)
connect(substrate__IHPSG13G2, _wafer)
# connect(GatPoly,GatPoly.pin)
connect(GatPoly, GatPoly_pin)
# connect(Activ,Activ.pin)
connect(Activ, Activ_pin)
# connect(Activ__conn,Activ__conn:pSD)
connect(Activ__conn, Activ__conn__pSD)
# connect(Activ__conn:pSD,substrate:IHPSG13G2)
connect(Activ__conn__pSD, substrate__IHPSG13G2)
# connect(Activ__conn,Activ__conn:bare)
connect(Activ__conn, Activ__conn__bare)
# connect(Activ__conn:bare,NWell)
connect(Activ__conn__bare, NWell)
# connect(Metal1,Metal1.pin)
connect(Metal1, Metal1_pin)
# connect(Metal2,Metal2.pin)
connect(Metal2, Metal2_pin)
# connect(Metal3,Metal3.pin)
connect(Metal3, Metal3_pin)
# connect(Metal4,Metal4.pin)
connect(Metal4, Metal4_pin)
# connect(Metal5,Metal5.pin)
connect(Metal5, Metal5_pin)
# connect(TopMetal1,TopMetal1.pin)
connect(TopMetal1, TopMetal1_pin)
# connect(TopMetal2,TopMetal2.pin)
connect(TopMetal2, TopMetal2_pin)
# connect((Activ__conn,GatPoly__conn),Cont)
connect(Activ__conn, Cont)
connect(GatPoly__conn, Cont)
# connect(Cont,Metal1)
connect(Cont, Metal1)
# connect(Metal1,Via1)
connect(Metal1, Via1)
# connect(Via1,Metal2)
connect(Via1, Metal2)
# connect(Metal2,Via2)
connect(Metal2, Via2)
# connect(Via2,Metal3)
connect(Via2, Metal3)
# connect(Metal3,Via3)
connect(Metal3, Via3)
# connect(Via3,Metal4)
connect(Via3, Metal4)
# connect(Metal4,Via4)
connect(Metal4, Via4)
# connect(Via4,Metal5)
connect(Via4, Metal5)
# connect(Metal5,TopVia1)
connect(Metal5, TopVia1)
# connect(TopVia1,TopMetal1)
connect(TopVia1, TopMetal1)
# connect(TopMetal1,TopVia2)
connect(TopMetal1, TopVia2)
# connect(TopVia2,TopMetal2)
connect(TopVia2, TopMetal2)

# Resistors
# Rppd
extract_devices(resistor("Rppd", 260.0), {
    "R" => resistor__Rppd, "C" => GatPoly__conn,
})
same_device_classes("Rppd", "rppd")
# Rsil
extract_devices(resistor("Rsil", 7.0), {
    "R" => resistor__Rsil, "C" => GatPoly__conn,
})
same_device_classes("Rsil", "rsil")

# Diodes
# pdiode
extract_devices(diode("dpantenna"), {
    "P" => diode__pdiode, "N" => NWell, "tA" => Activ__conn
})
# ndiode
extract_devices(diode("dantenna"), {
    "P" => substrate__IHPSG13G2, "N" => diode__ndiode, "tC" => Activ__conn
})

# Transistors
# sg13g2_hv_nmos
extract_devices(mos4("sg13_hv_nmos"), {
    "SD" => Activ__conn, "G" => gate__mosfet__sg13g2_hv_nmos, "tG" => GatPoly__conn, "W" => substrate__IHPSG13G2,
})
# sg13g2_hv_pmos
extract_devices(mos4("sg13_hv_pmos"), {
    "SD" => Activ__conn, "G" => gate__mosfet__sg13g2_hv_pmos, "tG" => GatPoly__conn, "W" => NWell,
})
# sg13g2_lv_nmos
extract_devices(mos4("sg13_lv_nmos"), {
    "SD" => Activ__conn, "G" => gate__mosfet__sg13g2_lv_nmos, "tG" => GatPoly__conn, "W" => substrate__IHPSG13G2,
})
# sg13g2_lv_pmos
extract_devices(mos4("sg13_lv_pmos"), {
    "SD" => Activ__conn, "G" => gate__mosfet__sg13g2_lv_pmos, "tG" => GatPoly__conn, "W" => NWell,
})

netlist

align
ok = compare
if ok then
    print("LVS OK\n")
else
    abort "LVS Failed!"
end
